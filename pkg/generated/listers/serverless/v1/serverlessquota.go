/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/SUMMERLm/serverlessquota/pkg/apis/serverless/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerlessquotaLister helps list Serverlessquotas.
// All objects returned here must be treated as read-only.
type ServerlessquotaLister interface {
	// List lists all Serverlessquotas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Serverlessquota, err error)
	// Serverlessquotas returns an object that can list and get Serverlessquotas.
	Serverlessquotas(namespace string) ServerlessquotaNamespaceLister
	ServerlessquotaListerExpansion
}

// serverlessquotaLister implements the ServerlessquotaLister interface.
type serverlessquotaLister struct {
	indexer cache.Indexer
}

// NewServerlessquotaLister returns a new ServerlessquotaLister.
func NewServerlessquotaLister(indexer cache.Indexer) ServerlessquotaLister {
	return &serverlessquotaLister{indexer: indexer}
}

// List lists all Serverlessquotas in the indexer.
func (s *serverlessquotaLister) List(selector labels.Selector) (ret []*v1.Serverlessquota, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Serverlessquota))
	})
	return ret, err
}

// Serverlessquotas returns an object that can list and get Serverlessquotas.
func (s *serverlessquotaLister) Serverlessquotas(namespace string) ServerlessquotaNamespaceLister {
	return serverlessquotaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerlessquotaNamespaceLister helps list and get Serverlessquotas.
// All objects returned here must be treated as read-only.
type ServerlessquotaNamespaceLister interface {
	// List lists all Serverlessquotas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Serverlessquota, err error)
	// Get retrieves the Serverlessquota from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Serverlessquota, error)
	ServerlessquotaNamespaceListerExpansion
}

// serverlessquotaNamespaceLister implements the ServerlessquotaNamespaceLister
// interface.
type serverlessquotaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Serverlessquotas in the indexer for a given namespace.
func (s serverlessquotaNamespaceLister) List(selector labels.Selector) (ret []*v1.Serverlessquota, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Serverlessquota))
	})
	return ret, err
}

// Get retrieves the Serverlessquota from the indexer for a given namespace and name.
func (s serverlessquotaNamespaceLister) Get(name string) (*v1.Serverlessquota, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("serverlessquota"), name)
	}
	return obj.(*v1.Serverlessquota), nil
}
